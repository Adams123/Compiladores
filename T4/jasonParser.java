/* Generated By:JavaCC: Do not edit this line. jasonParser.java */
import java.io.*;
import jasonParser.Simbolo;
import java.util.Stack;

public class jasonParser implements jasonParserConstants {
	private int nivelcorr;
	private Stack<Simbolo> stack;

	public static void main(String[] args) throws ParseException, TokenMgrError {
		jasonParser t=null;
		try {
			if (args.length == 0) {
				t = new jasonParser(System.in);
			} else if (args.length == 1) {
				// lÃª do arquivo cujo nome esta em args[0]

					FileInputStream fis = new FileInputStream(args[0]);
					t = new jasonParser(fis);
			} else {
			// Formato de entrada invalido
			System.out.println("Formato de entrada invalido.");
			return;
		}
		t.start();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		} catch (Error e){
			System.out.println(e.getMessage());
		}

	}

/* GRAMMAR START */
	final public void start() throws ParseException {
 Token t;
 stack = new Stack<Simbolo>();
	 System.out.println("0 - program");
	program();
	t = jj_consume_token(0);
	while(!stack.empty()){
	Simbolo top = stack.pop();
	top.printAll();
	}
		 System.out.println("SUCESSO");
	}

//--------------LUCAS
	final public void program() throws ParseException {
	 System.out.println("1- <beginProgram>");
	header();
	declSec();
	block();
	jj_consume_token(DOT);
	}

	final public void header() throws ParseException {
		System.out.println("2 - <Header> ");
	jj_consume_token(PROGRAM);
	jj_consume_token(ID);
	jj_consume_token(EOL);
	}

	final public void block() throws ParseException {
		System.out.println("3 - <Block> ");
	++nivelcorr;
	jj_consume_token(BEGIN);
	statements();
	jj_consume_token(END);
	--nivelcorr;
	}

	final public void declSec() throws ParseException {
		System.out.println("4 - <DeclSec> ");
	typeDeclSec();
	varDeclSec();
	subProgramDecls();
	}

	final public void typeDeclSec() throws ParseException {
		System.out.println("5 - <TypeDeclSec> ");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case TYPES:
	jj_consume_token(TYPES);
	typeDecls();
	break;
	default:
	jj_la1[0] = jj_gen;
	;
	}
	}

	final public void typeDecls() throws ParseException {
		System.out.println("6 - <TypeDecls> ");
	label_1:
	while (true) {
	typeDecl();
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case ID:
	;
	break;
	default:
	jj_la1[1] = jj_gen;
	break label_1;
	}
	}
	}

	final public void typeDecl() throws ParseException {
	Token t;
	Simbolo top = new Simbolo();
		System.out.println("7 - <TypeDecl> ");
	t = jj_consume_token(ID);
	top.setId(t.toString());
	top.setNivel(nivelcorr);
	stack.push(top);
	typeSpecification();
	}

	final public void typeSpecification() throws ParseException {
		System.out.println("8 - <TypeSpecification> ");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case ARRAY:
	arraySpecification();
	break;
	case RECORD:
	recordSpecification();
	break;
	default:
	jj_la1[2] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	}

	final public void arraySpecification() throws ParseException {
	Token t;
	Simbolo top;
		System.out.println("9 - <ArraySpecification> ");
	jj_consume_token(ARRAY);
	dataType();
	jj_consume_token(LBRA);
	t = jj_consume_token(INT);
	top = stack.peek();
	top.setCat(Simbolo.categorias.VAR);
	top.setInf(0);
	top.setSup(Integer.parseInt(t.toString()) - 1);
	jj_consume_token(RBRA);
	jj_consume_token(EOL);
	}

	final public void recordSpecification() throws ParseException {
	Token t;
	Simbolo top, newtop;
		System.out.println("10 - <RecordSpecification> ");
	jj_consume_token(RECORD);
	top = stack.peek();
	top.setCat(Simbolo.categorias.REGISTER);
	++nivelcorr;
	newtop = new Simbolo();
	top.setNivel(nivelcorr);
	varDecls();
	jj_consume_token(END);
	jj_consume_token(EOL);
	--nivelcorr;
	}

	final public void varDeclSec() throws ParseException {
		System.out.println("11 - <VarDeclSec> ");
	label_2:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case VARIABLES:
	;
	break;
	default:
	jj_la1[3] = jj_gen;
	break label_2;
	}
	jj_consume_token(VARIABLES);
	varDecls();
	}
	}

	final public void varDecls() throws ParseException {
	 System.out.println("12- <VarDecls>");
	label_3:
	while (true) {
	varDecl();
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case INTEGER:
	case REAL:
	case STRING:
	case ID:
	;
	break;
	default:
	jj_la1[4] = jj_gen;
	break label_3;
	}
	}
	}

//-----------FIM LUCAS
//-----------ANA
	final public void varDecl() throws ParseException {
	System.out.println("TESTE");
	System.out.println(nivelcorr);
	Simbolo top = new Simbolo();
	 System.out.println("13- <VarDecl>");
	top.setNivel(nivelcorr);
	stack.push(top);
	dataType();
	idList();
	jj_consume_token(EOL);
	}

	final public void dataType() throws ParseException {
	Token t;
	Simbolo top;
	top = stack.peek();
	 System.out.println("14 - <DataType>");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case REAL:
	jj_consume_token(REAL);
	top.setTipo(Simbolo.tipos.REAL);
	break;
	case INTEGER:
	jj_consume_token(INTEGER);
	top.setTipo(Simbolo.tipos.INTEGER);
	break;
	case ID:
	jj_consume_token(ID);
	break;
	case STRING:
	jj_consume_token(STRING);
	top.setTipo(Simbolo.tipos.STRING);
	break;
	default:
	jj_la1[5] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	}

	final public void idList() throws ParseException {
	Token t;
	Simbolo top;
	 System.out.println("15 - <IdList>");
	t = jj_consume_token(ID);
	top = stack.peek();
	top.setId(t.toString());
	top.setNivel(nivelcorr);
	top.setCat(Simbolo.categorias.VAR);
	label_4:
	while (true) {
	Simbolo newtop = new Simbolo();
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case COM:
	;
	break;
	default:
	jj_la1[6] = jj_gen;
	break label_4;
	}
	jj_consume_token(COM);
	t = jj_consume_token(ID);
	newtop.setTipo(top.getTipo());
	newtop.setNivel(nivelcorr);
	newtop.setCat(Simbolo.categorias.VAR);
	newtop.setId(t.toString());
	stack.push(newtop);
	}
	}

	final public void subProgramDecls() throws ParseException {
	 System.out.println("16 - <SubProgramDecls>");
	label_5:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case FUNCTION:
	case PROCEDURE:
	;
	break;
	default:
	jj_la1[7] = jj_gen;
	break label_5;
	}
	subProgramDecl();
	}
	}

	final public void subProgramDecl() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case PROCEDURE:
	 System.out.println("17 - <SubProgramDecl>");
	procDecl();
	break;
	case FUNCTION:
	functionDecl();
	break;
	default:
	jj_la1[8] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	}

	final public void procDecl() throws ParseException {
	Simbolo top = new Simbolo();
	++nivelcorr;
	top.setNivel(nivelcorr);
	stack.push(top);
	 System.out.println("18 - <ProcDecl>");
	procHeader();
	subProgramDeclSec();
	block();
	jj_consume_token(EOL);
	}

	final public void procHeader() throws ParseException {
	Token t;
	Simbolo top;
	 System.out.println("19 - <ProcHeader>");
	jj_consume_token(PROCEDURE);
	t = jj_consume_token(ID);
	jj_consume_token(EOL);
	top = stack.peek();
	top.setId(t.toString());
	top.setCat(Simbolo.categorias.PROCEDURE);
	}

	final public void subProgramDeclSec() throws ParseException {
	 System.out.println("20 - <SubProgramDeclSec>");
	paramDeclSec();
	declSec();
	}

	final public void paramDeclSec() throws ParseException {
	 System.out.println("21 -<ParamDeclSec>");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case PARAMETERS:
	jj_consume_token(PARAMETERS);
	paramDecls();
	break;
	default:
	jj_la1[9] = jj_gen;
	;
	}
	}

	final public void paramDecls() throws ParseException {
	 System.out.println("22 -<ParamDecls>");
	label_6:
	while (true) {
	paramDecl();
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case VAR:
	case INTEGER:
	case REAL:
	case STRING:
	case ID:
	;
	break;
	default:
	jj_la1[10] = jj_gen;
	break label_6;
	}
	}
	}

//--------FIM ANA

//-------------- ADAMS 
	final public void paramDecl() throws ParseException {
	Token t;
	Simbolo top = new Simbolo();
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case INTEGER:
	case REAL:
	case STRING:
	case ID:
	 System.out.println("23 -<paramDecl>");
	top.setClass(Simbolo.classes.VALOR);
	top.setNivel(nivelcorr);
	stack.push(top);
	dataType();
	t = jj_consume_token(ID);
	top.setId(t.toString());
	jj_consume_token(EOL);
	break;
	case VAR:
	jj_consume_token(VAR);
	top.setClass(Simbolo.classes.REFERENCIA);
	top.setNivel(nivelcorr);
	stack.push(top);
	dataType();
	t = jj_consume_token(ID);
	top.setId(t.toString());
	jj_consume_token(EOL);
	break;
	default:
	jj_la1[11] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	}

	final public void functionDecl() throws ParseException {
	 System.out.println("24 -<functionDecl>");
	functionHeader();
	subProgramDeclSec();
	functionBlock();
	jj_consume_token(EOL);
	}

	final public void functionHeader() throws ParseException {
	Token t;
	Simbolo top = new Simbolo();
	 System.out.println("25 -<functionHeader>");
	top.setNivel(nivelcorr);
	top.setCat(Simbolo.categorias.FUNCTION);
	jj_consume_token(FUNCTION);
	t = jj_consume_token(ID);
	top.setId(t.toString());
	stack.push(top);
	jj_consume_token(RETURNS);
	dataType();
	jj_consume_token(EOL);
	}

	final public void functionBlock() throws ParseException {
	 System.out.println("26 -<functionBlock>");
	jj_consume_token(BEGIN);
	label_7:
	while (true) {
	statement();
	jj_consume_token(EOL);
	if (jj_2_1(2)) {
	;
	} else {
	break label_7;
	}
	}
	returnStatement();
	jj_consume_token(END);
	}

	final public void statements() throws ParseException {
	 System.out.println("27 -<statements>");
	statement();
	label_8:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case EOL:
	;
	break;
	default:
	jj_la1[12] = jj_gen;
	break label_8;
	}
	jj_consume_token(EOL);
	statement();
	}
	}

	final public void statement() throws ParseException {
	Token t;
	Simbolo node;
	 System.out.println("28 -<statement>");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case CALL:
	case IF:
	case SET:
	case UNTIL:
	case WHILE:
	case WRITE:
	case READ:
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case WRITE:
	case READ:
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case READ:
		jj_consume_token(READ);
		break;
	case WRITE:
		jj_consume_token(WRITE);
		break;
	default:
		jj_la1[13] = jj_gen;
		jj_consume_token(-1);
		throw new ParseException();
	}
	jj_consume_token(ID);
	variable();
	break;
	case SET:
	jj_consume_token(SET);
	t = jj_consume_token(ID);
	//node = stack.searchById(t.toString(), stack);
	variable();
	jj_consume_token(COMPARE);
	expression();
	break;
	case IF:
	jj_consume_token(IF);
	condition();
	jj_consume_token(THEN);
	statements();
	elseClause();
	break;
	case WHILE:
	jj_consume_token(WHILE);
	condition();
	jj_consume_token(DO);
	statements();
	jj_consume_token(ENDWHILE);
	break;
	case UNTIL:
	jj_consume_token(UNTIL);
	condition();
	jj_consume_token(DO);
	statements();
	jj_consume_token(ENDUNTIL);
	break;
	case CALL:
	jj_consume_token(CALL);
	jj_consume_token(ID);
	argList();
	break;
	default:
	jj_la1[14] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	break;
	default:
	jj_la1[15] = jj_gen;
	;
	}
	}

	final public void elseClause() throws ParseException {
	 System.out.println("29 -<elseClause>");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case ELSE:
	jj_consume_token(ELSE);
	statements();
	break;
	default:
	jj_la1[16] = jj_gen;
	;
	}
	jj_consume_token(ENDIF);
	}

	final public void returnStatement() throws ParseException {
	 System.out.println("30 -<returnStatement>");
	jj_consume_token(RETURN);
	jj_consume_token(LBAR);
	condition();
	jj_consume_token(RBAR);
	}

	final public void argList() throws ParseException {
	 System.out.println("31 -<argList>");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case LBAR:
	jj_consume_token(LBAR);
	arguments();
	jj_consume_token(RBAR);
	break;
	default:
	jj_la1[17] = jj_gen;
	;
	}
	}

	final public void arguments() throws ParseException {
	 System.out.println("32 -<arguments>");
	argument();
	label_9:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case COM:
	;
	break;
	default:
	jj_la1[18] = jj_gen;
	break label_9;
	}
	jj_consume_token(COM);
	argument();
	}
	}

//---------- FIM ADAMS

//---------- QUIABO
	final public void condition() throws ParseException {
		System.out.println("33 - <Condition>\u005cn");
	compoundCondition();
	label_10:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case REVBAR:
	;
	break;
	default:
	jj_la1[19] = jj_gen;
	break label_10;
	}
	jj_consume_token(REVBAR);
	compoundCondition();
	}
	}

	final public void compoundCondition() throws ParseException {
		System.out.println("34 - <CompoundCondition>\u005cn");
	simpleCondition();
	label_11:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case AND:
	;
	break;
	default:
	jj_la1[20] = jj_gen;
	break label_11;
	}
	jj_consume_token(AND);
	simpleCondition();
	}
	}

	final public void simpleCondition() throws ParseException {
		System.out.println("35 - <SimpleCondition>\u005cn");
	expression();
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case NOT:
	case COMPARE:
	case LEQUAL:
	case HEQUAL:
	case LESS:
	case HIGHER:
	case DIFF:
	relOp();
	expression();
	break;
	default:
	jj_la1[21] = jj_gen;
	;
	}
	}

	final public void expression() throws ParseException {
		System.out.println("36 - <Expression>\u005cn");
	term();
	label_12:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case SUM:
	case SUB:
	;
	break;
	default:
	jj_la1[22] = jj_gen;
	break label_12;
	}
	addOp();
	term();
	}
	}

	final public void addOp() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case SUM:
		System.out.println("37 - <AddOp>\u005cn");
	jj_consume_token(SUM);
	break;
	case SUB:
	jj_consume_token(SUB);
	break;
	default:
	jj_la1[23] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	}

	final public void term() throws ParseException {
		System.out.println("38 - <Term>\u005cn");
	unary();
	label_13:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case MUL:
	case DIV:
	;
	break;
	default:
	jj_la1[24] = jj_gen;
	break label_13;
	}
	mulOp();
	unary();
	}
	}

	final public void mulOp() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case MUL:
		System.out.println("39 - <MulOp>\u005cn");
	jj_consume_token(MUL);
	break;
	case DIV:
	jj_consume_token(DIV);
	break;
	default:
	jj_la1[25] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	}

	final public void unary() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case SUM:
	case SUB:
		System.out.println("40 - <Unary>\u005cn");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case SUM:
	jj_consume_token(SUM);
	break;
	case SUB:
	jj_consume_token(SUB);
	break;
	default:
	jj_la1[26] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	unary();
	break;
	default:
	jj_la1[27] = jj_gen;
	factor();
	}
	}

	final public void factor() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case ID:
		System.out.println("41 - <Factor>\u005cn");
	jj_consume_token(ID);
	argList();
	break;
	case INT:
	jj_consume_token(INT);
	break;
	case FLOAT:
	jj_consume_token(FLOAT);
	break;
	case STR:
	jj_consume_token(STR);
	break;
	case NOT:
	jj_consume_token(NOT);
	factor();
	break;
	case LBAR:
	jj_consume_token(LBAR);
	condition();
	jj_consume_token(RBAR);
	break;
	default:
	jj_la1[28] = jj_gen;
	variable();
	}
	}

	final public void variable() throws ParseException {
		System.out.println("42 - <Variable>\u005cn");
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case LBRA:
	jj_consume_token(LBRA);
	expression();
	jj_consume_token(RBRA);
	break;
	default:
	jj_la1[29] = jj_gen;
	;
	}
	label_14:
	while (true) {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case DOT:
	;
	break;
	default:
	jj_la1[30] = jj_gen;
	break label_14;
	}
	jj_consume_token(DOT);
	jj_consume_token(ID);
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case LBRA:
	jj_consume_token(LBRA);
	expression();
	jj_consume_token(RBRA);
	break;
	default:
	jj_la1[31] = jj_gen;
	;
	}
	}
	}

	final public void relOp() throws ParseException {
	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	case COMPARE:
		System.out.println("43 - <RelOp>\u005cn");
	jj_consume_token(COMPARE);
	break;
	case NOT:
	jj_consume_token(NOT);
	break;
	case HIGHER:
	jj_consume_token(HIGHER);
	break;
	case LESS:
	jj_consume_token(LESS);
	break;
	case LEQUAL:
	jj_consume_token(LEQUAL);
	break;
	case HEQUAL:
	jj_consume_token(HEQUAL);
	break;
	case DIFF:
	jj_consume_token(DIFF);
	break;
	default:
	jj_la1[32] = jj_gen;
	jj_consume_token(-1);
	throw new ParseException();
	}
	}

	final public void argument() throws ParseException {
		System.out.println("44 - <Argument>\u005cn");
	condition();
	}

	private boolean jj_2_1(int xla) {
	jj_la = xla; jj_lastpos = jj_scanpos = token;
	try { return !jj_3_1(); }
	catch(LookaheadSuccess ls) { return true; }
	finally { jj_save(0, xla); }
	}

	private boolean jj_3R_15() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_16()) jj_scanpos = xsp;
	return false;
	}

	private boolean jj_3_1() {
	if (jj_3R_15()) return true;
	if (jj_scan_token(EOL)) return true;
	return false;
	}

	private boolean jj_3R_32() {
	if (jj_scan_token(ID)) return true;
	return false;
	}

	private boolean jj_3R_31() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_32()) {
	jj_scanpos = xsp;
	if (jj_scan_token(60)) {
	jj_scanpos = xsp;
	if (jj_scan_token(61)) {
	jj_scanpos = xsp;
	if (jj_scan_token(64)) {
	jj_scanpos = xsp;
	if (jj_3R_33()) {
	jj_scanpos = xsp;
	if (jj_3R_34()) {
	jj_scanpos = xsp;
	if (jj_3R_35()) return true;
	}
	}
	}
	}
	}
	}
	return false;
	}

	private boolean jj_3R_24() {
	if (jj_3R_25()) return true;
	return false;
	}

	private boolean jj_3R_33() {
	if (jj_scan_token(NOT)) return true;
	return false;
	}

	private boolean jj_3R_35() {
	if (jj_3R_36()) return true;
	return false;
	}

	private boolean jj_3R_28() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_29()) {
	jj_scanpos = xsp;
	if (jj_3R_30()) return true;
	}
	return false;
	}

	private boolean jj_3R_29() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_scan_token(48)) {
	jj_scanpos = xsp;
	if (jj_scan_token(49)) return true;
	}
	return false;
	}

	private boolean jj_3R_23() {
	if (jj_3R_24()) return true;
	return false;
	}

	private boolean jj_3R_38() {
	if (jj_scan_token(DOT)) return true;
	return false;
	}

	private boolean jj_3R_27() {
	if (jj_3R_28()) return true;
	return false;
	}

	private boolean jj_3R_30() {
	if (jj_3R_31()) return true;
	return false;
	}

	private boolean jj_3R_22() {
	if (jj_scan_token(CALL)) return true;
	if (jj_scan_token(ID)) return true;
	return false;
	}

	private boolean jj_3R_21() {
	if (jj_scan_token(UNTIL)) return true;
	if (jj_3R_23()) return true;
	return false;
	}

	private boolean jj_3R_20() {
	if (jj_scan_token(WHILE)) return true;
	if (jj_3R_23()) return true;
	return false;
	}

	private boolean jj_3R_19() {
	if (jj_scan_token(IF)) return true;
	if (jj_3R_23()) return true;
	return false;
	}

	private boolean jj_3R_34() {
	if (jj_scan_token(LBAR)) return true;
	return false;
	}

	private boolean jj_3R_18() {
	if (jj_scan_token(SET)) return true;
	if (jj_scan_token(ID)) return true;
	return false;
	}

	private boolean jj_3R_26() {
	if (jj_3R_27()) return true;
	return false;
	}

	private boolean jj_3R_37() {
	if (jj_scan_token(LBRA)) return true;
	return false;
	}

	private boolean jj_3R_36() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_37()) jj_scanpos = xsp;
	while (true) {
	xsp = jj_scanpos;
	if (jj_3R_38()) { jj_scanpos = xsp; break; }
	}
	return false;
	}

	private boolean jj_3R_25() {
	if (jj_3R_26()) return true;
	return false;
	}

	private boolean jj_3R_17() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_scan_token(37)) {
	jj_scanpos = xsp;
	if (jj_scan_token(36)) return true;
	}
	if (jj_scan_token(ID)) return true;
	return false;
	}

	private boolean jj_3R_16() {
	Token xsp;
	xsp = jj_scanpos;
	if (jj_3R_17()) {
	jj_scanpos = xsp;
	if (jj_3R_18()) {
	jj_scanpos = xsp;
	if (jj_3R_19()) {
	jj_scanpos = xsp;
	if (jj_3R_20()) {
	jj_scanpos = xsp;
	if (jj_3R_21()) {
	jj_scanpos = xsp;
	if (jj_3R_22()) return true;
	}
	}
	}
	}
	}
	return false;
	}

	/** Generated Token Manager. */
	public jasonParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[33];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static {
	jj_la1_init_0();
	jj_la1_init_1();
	jj_la1_init_2();
	 }
	 private static void jj_la1_init_0() {
	jj_la1_0 = new int[] {0x0,0x0,0x10000400,0x0,0x48200000,0x48200000,0x0,0x880000,0x880000,0x400000,0x48200200,0x48200200,0x0,0x0,0x20101000,0x20101000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	 }
	 private static void jj_la1_init_1() {
	jj_la1_1 = new int[] {0x1,0x40000000,0x0,0x4,0x40000000,0x40000000,0x2000000,0x0,0x0,0x0,0x40000000,0x40000000,0x8000000,0x30,0x3a,0x3a,0x0,0x100000,0x2000000,0x4000000,0x100,0xfe00,0x30000,0x30000,0xc0000,0xc0000,0x30000,0x30000,0x70100200,0x400000,0x1000000,0x400000,0xfe00,};
	 }
	 private static void jj_la1_init_2() {
	jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,};
	 }
	final private JJCalls[] jj_2_rtns = new JJCalls[1];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public jasonParser(java.io.InputStream stream) {
	 this(stream, null);
	}
	/** Constructor with InputStream and supplied encoding */
	public jasonParser(java.io.InputStream stream, String encoding) {
	try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	token_source = new jasonParserTokenManager(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
	 ReInit(stream, null);
	}
	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
	try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	token_source.ReInit(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public jasonParser(java.io.Reader stream) {
	jj_input_stream = new SimpleCharStream(stream, 1, 1);
	token_source = new jasonParserTokenManager(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
	jj_input_stream.ReInit(stream, 1, 1);
	token_source.ReInit(jj_input_stream);
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public jasonParser(jasonParserTokenManager tm) {
	token_source = tm;
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(jasonParserTokenManager tm) {
	token_source = tm;
	token = new Token();
	jj_ntk = -1;
	jj_gen = 0;
	for (int i = 0; i < 33; i++) jj_la1[i] = -1;
	for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
	Token oldToken;
	if ((oldToken = token).next != null) token = token.next;
	else token = token.next = token_source.getNextToken();
	jj_ntk = -1;
	if (token.kind == kind) {
	jj_gen++;
	if (++jj_gc > 100) {
	jj_gc = 0;
	for (int i = 0; i < jj_2_rtns.length; i++) {
		JJCalls c = jj_2_rtns[i];
		while (c != null) {
		if (c.gen < jj_gen) c.first = null;
		c = c.next;
		}
	}
	}
	return token;
	}
	token = oldToken;
	jj_kind = kind;
	throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error { }
	final private LookaheadSuccess jj_ls = new LookaheadSuccess();
	private boolean jj_scan_token(int kind) {
	if (jj_scanpos == jj_lastpos) {
	jj_la--;
	if (jj_scanpos.next == null) {
	jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	} else {
	jj_lastpos = jj_scanpos = jj_scanpos.next;
	}
	} else {
	jj_scanpos = jj_scanpos.next;
	}
	if (jj_rescan) {
	int i = 0; Token tok = token;
	while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	if (tok != null) jj_add_error_token(kind, i);
	}
	if (jj_scanpos.kind != kind) return true;
	if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	return false;
	}


/** Get the next Token. */
	final public Token getNextToken() {
	if (token.next != null) token = token.next;
	else token = token.next = token_source.getNextToken();
	jj_ntk = -1;
	jj_gen++;
	return token;
	}

/** Get the specific Token. */
	final public Token getToken(int index) {
	Token t = token;
	for (int i = 0; i < index; i++) {
	if (t.next != null) t = t.next;
	else t = t.next = token_source.getNextToken();
	}
	return t;
	}

	private int jj_ntk() {
	if ((jj_nt=token.next) == null)
	return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	else
	return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
	if (pos >= 100) return;
	if (pos == jj_endpos + 1) {
	jj_lasttokens[jj_endpos++] = kind;
	} else if (jj_endpos != 0) {
	jj_expentry = new int[jj_endpos];
	for (int i = 0; i < jj_endpos; i++) {
	jj_expentry[i] = jj_lasttokens[i];
	}
	boolean exists = false;
	for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
	exists = true;
	int[] oldentry = (int[])(it.next());
	if (oldentry.length == jj_expentry.length) {
		for (int i = 0; i < jj_expentry.length; i++) {
		if (oldentry[i] != jj_expentry[i]) {
		exists = false;
		break;
		}
		}
		if (exists) break;
	}
	}
	if (!exists) jj_expentries.add(jj_expentry);
	if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
	jj_expentries.clear();
	boolean[] la1tokens = new boolean[66];
	if (jj_kind >= 0) {
	la1tokens[jj_kind] = true;
	jj_kind = -1;
	}
	for (int i = 0; i < 33; i++) {
	if (jj_la1[i] == jj_gen) {
	for (int j = 0; j < 32; j++) {
		if ((jj_la1_0[i] & (1<<j)) != 0) {
		la1tokens[j] = true;
		}
		if ((jj_la1_1[i] & (1<<j)) != 0) {
		la1tokens[32+j] = true;
		}
		if ((jj_la1_2[i] & (1<<j)) != 0) {
		la1tokens[64+j] = true;
		}
	}
	}
	}
	for (int i = 0; i < 66; i++) {
	if (la1tokens[i]) {
	jj_expentry = new int[1];
	jj_expentry[0] = i;
	jj_expentries.add(jj_expentry);
	}
	}
	jj_endpos = 0;
	jj_rescan_token();
	jj_add_error_token(0, 0);
	int[][] exptokseq = new int[jj_expentries.size()][];
	for (int i = 0; i < jj_expentries.size(); i++) {
	exptokseq[i] = jj_expentries.get(i);
	}
	return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
	jj_rescan = true;
	for (int i = 0; i < 1; i++) {
	try {
	JJCalls p = jj_2_rtns[i];
	do {
	if (p.gen > jj_gen) {
		jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
		switch (i) {
		case 0: jj_3_1(); break;
		}
	}
	p = p.next;
	} while (p != null);
	} catch(LookaheadSuccess ls) { }
	}
	jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
	JJCalls p = jj_2_rtns[index];
	while (p.gen > jj_gen) {
	if (p.next == null) { p = p.next = new JJCalls(); break; }
	p = p.next;
	}
	p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
	}

	static final class JJCalls {
	int gen;
	Token first;
	int arg;
	JJCalls next;
	}

}
