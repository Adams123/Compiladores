/* Generated By:JavaCC: Do not edit this line. jasonParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface jasonParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int VAR = 9;
  /** RegularExpression Id. */
  int ARRAY = 10;
  /** RegularExpression Id. */
  int BEGIN = 11;
  /** RegularExpression Id. */
  int CALL = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int END = 15;
  /** RegularExpression Id. */
  int ENDIF = 16;
  /** RegularExpression Id. */
  int ENDUNTIL = 17;
  /** RegularExpression Id. */
  int ENDWHILE = 18;
  /** RegularExpression Id. */
  int FUNCTION = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int INTEGER = 21;
  /** RegularExpression Id. */
  int PARAMETERS = 22;
  /** RegularExpression Id. */
  int PROCEDURE = 23;
  /** RegularExpression Id. */
  int RETURNS = 24;
  /** RegularExpression Id. */
  int RETURN = 25;
  /** RegularExpression Id. */
  int PROGRAM = 26;
  /** RegularExpression Id. */
  int REAL = 27;
  /** RegularExpression Id. */
  int RECORD = 28;
  /** RegularExpression Id. */
  int SET = 29;
  /** RegularExpression Id. */
  int STRING = 30;
  /** RegularExpression Id. */
  int THEN = 31;
  /** RegularExpression Id. */
  int TYPES = 32;
  /** RegularExpression Id. */
  int UNTIL = 33;
  /** RegularExpression Id. */
  int VARIABLES = 34;
  /** RegularExpression Id. */
  int WHILE = 35;
  /** RegularExpression Id. */
  int WRITE = 36;
  /** RegularExpression Id. */
  int READ = 37;
  /** RegularExpression Id. */
  int PARAMETER = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int COMPARE = 42;
  /** RegularExpression Id. */
  int LEQUAL = 43;
  /** RegularExpression Id. */
  int HEQUAL = 44;
  /** RegularExpression Id. */
  int LESS = 45;
  /** RegularExpression Id. */
  int HIGHER = 46;
  /** RegularExpression Id. */
  int DIFF = 47;
  /** RegularExpression Id. */
  int SUM = 48;
  /** RegularExpression Id. */
  int SUB = 49;
  /** RegularExpression Id. */
  int MUL = 50;
  /** RegularExpression Id. */
  int DIV = 51;
  /** RegularExpression Id. */
  int LBAR = 52;
  /** RegularExpression Id. */
  int RBAR = 53;
  /** RegularExpression Id. */
  int LBRA = 54;
  /** RegularExpression Id. */
  int RBRA = 55;
  /** RegularExpression Id. */
  int DOT = 56;
  /** RegularExpression Id. */
  int COM = 57;
  /** RegularExpression Id. */
  int REVBAR = 58;
  /** RegularExpression Id. */
  int EOL = 59;
  /** RegularExpression Id. */
  int INT = 60;
  /** RegularExpression Id. */
  int FLOAT = 61;
  /** RegularExpression Id. */
  int ID = 62;
  /** RegularExpression Id. */
  int STR = 64;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;
  /** Lexical state. */
  int WithinString = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\n\"",
    "\"{\"",
    "\"}\"",
    "<token of kind 8>",
    "\"var\"",
    "\"array\"",
    "\"begin\"",
    "\"call\"",
    "\"do\"",
    "\"else\"",
    "\"end\"",
    "\"endif\"",
    "\"enduntil\"",
    "\"endwhile\"",
    "\"function\"",
    "\"if\"",
    "\"integer\"",
    "\"parameters\"",
    "\"procedure\"",
    "\"returns\"",
    "\"return\"",
    "\"program\"",
    "\"real\"",
    "\"record\"",
    "\"set\"",
    "\"string\"",
    "\"then\"",
    "\"types\"",
    "\"until\"",
    "\"variables\"",
    "\"while\"",
    "\"write\"",
    "\"read\"",
    "\"parameter\"",
    "\"|\"",
    "\"&\"",
    "\"~\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\"\\\\\"",
    "\";\"",
    "<INT>",
    "<FLOAT>",
    "<ID>",
    "\"\\\"\"",
    "\"\\\"\"",
    "<token of kind 65>",
  };

}
