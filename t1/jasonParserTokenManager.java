/* Generated By:JavaCC: Do not edit this line. jasonParserTokenManager.java */
import java.io.*;

/** Token Manager. */
public class jasonParserTokenManager implements jasonParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffffffe00L) != 0L)
         {
            jjmatchedKind = 62;
            return 5;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x1fffefde00L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
            return 5;
         }
         if ((active0 & 0x102000L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active0 & 0x1bdfe85c00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 2;
            }
            return 5;
         }
         if ((active0 & 0x420078200L) != 0L)
            return 5;
         return -1;
      case 3:
         if ((active0 & 0x1f57ef0c00L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
            return 5;
         }
         if ((active0 & 0x88005000L) != 0L)
            return 5;
         return -1;
      case 4:
         if ((active0 & 0x457ee0000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 5;
         }
         if ((active0 & 0x1b00010c00L) != 0L)
            return 5;
         return -1;
      case 5:
         if ((active0 & 0x53000000L) != 0L)
            return 5;
         if ((active0 & 0x404ee0000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 5;
            }
            return 5;
         }
         return -1;
      case 6:
         if ((active0 & 0x5200000L) != 0L)
            return 5;
         if ((active0 & 0x400ce0000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 6;
            return 5;
         }
         return -1;
      case 7:
         if ((active0 & 0xe0000L) != 0L)
            return 5;
         if ((active0 & 0x400c00000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 7;
            return 5;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
            return 5;
         }
         if ((active0 & 0x400800000L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 5);
      case 33:
         return jjStopAtPos(0, 39);
      case 34:
         return jjStartNfaWithStates_0(0, 56, 9);
      case 38:
         return jjStopAtPos(0, 38);
      case 40:
         return jjStopAtPos(0, 50);
      case 41:
         return jjStopAtPos(0, 51);
      case 42:
         return jjStopAtPos(0, 48);
      case 43:
         return jjStopAtPos(0, 46);
      case 44:
         return jjStopAtPos(0, 55);
      case 45:
         return jjStopAtPos(0, 47);
      case 46:
         return jjStopAtPos(0, 54);
      case 47:
         return jjStopAtPos(0, 49);
      case 60:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 61:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 62:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 91:
         return jjStopAtPos(0, 52);
      case 92:
         return jjStopAtPos(0, 57);
      case 93:
         return jjStopAtPos(0, 53);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7c000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4c00000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1b000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x60000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x180000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000200L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1800000000L);
      case 123:
         return jjStopAtPos(0, 6);
      case 124:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 61:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400401200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3b000800L);
      case 70:
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 5);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x880000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200278000L);
      case 79:
      case 111:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 5);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004800400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 68:
      case 100:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x70000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x440400400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 5);
         return jjMoveStringLiteralDfa3_0(active0, 0x203200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000L);
      case 69:
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x100200000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x640010800L);
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 5);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 5);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 5);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x3020000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 5);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 70:
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 5);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 5);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 78:
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 5);
         return jjMoveStringLiteralDfa5_0(active0, 0x40020000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x17000000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 5);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 68:
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 5);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000L);
      case 71:
      case 103:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 5);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400040000L);
      case 77:
      case 109:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 5);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 5);
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 5);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 5);
         return jjMoveStringLiteralDfa8_0(active0, 0x400400000L);
      case 76:
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 5);
         break;
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 5);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 5);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 83:
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if ((0x800000000000400L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if ((0xffff70100002400L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 34)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xffff70100002400L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 34 && kind > 63)
                     kind = 63;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(5);
                  break;
               case 9:
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\174", "\46", "\41", 
"\75", "\74\75", "\76\75", "\75\41", "\74", "\76", "\53", "\55", "\52", "\57", "\50", 
"\51", "\133", "\135", "\56", "\54", "\42", "\134", null, null, null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xd7fffffffffffe01L, 0x0L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static final long[] jjtoMore = {
   0x100L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[9];
private final int[] jjstateSet = new int[18];
protected char curChar;
/** Constructor. */
public jasonParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public jasonParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
